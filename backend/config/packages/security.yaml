security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'


    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
        # used to reload user from session & other features (e.g. switch_user)

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        main:
            lazy: true
            stateless: true
            provider: app_user_provider
            json_login:
                check_path: /api/login
                username_path: username
                password_path: password
            custom_authenticator: App\Security\ApiTokenAuthenticator

        api:
            pattern: ^/api
            stateless: true

            

    access_control:
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        - { path: ^/api/admin, roles: PUBLIC_ACCESS }
        - { path: ^/api/employee, roles: PUBLIC_ACCESS }
        - { path: ^/api/vet, roles: ROLE_VET } 
        - { path: ^/api/contact/requests, roles: ROLE_EMPLOYEE }
        - { path: ^/api/contact/reply, roles: ROLE_EMPLOYEE }
        - { path: ^/api/contact$, roles: PUBLIC_ACCESS }
        - { path: ^/api/consultations$, roles: PUBLIC_ACCESS, methods: [POST] }
        - { path: ^/api/consultations$, roles: ROLE_ADMIN, methods: [GET] }
  


when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
